
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import semantico.Traductor.*;
import java.util.*;
import semantico.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\007\000\002\003\004\000\002\004\004" +
    "\000\002\004\003\000\002\020\004\000\002\075\004\000" +
    "\002\014\004\000\002\014\003\000\002\076\002\000\002" +
    "\014\007\000\002\015\007\000\002\016\003\000\002\016" +
    "\003\000\002\007\004\000\002\007\003\000\002\077\002" +
    "\000\002\007\007\000\002\010\010\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\003\000\002\100" +
    "\002\000\002\021\007\000\002\101\002\000\002\021\007" +
    "\000\002\023\016\000\002\023\015\000\002\024\013\000" +
    "\002\024\012\000\002\032\006\000\002\032\002\000\002" +
    "\027\003\000\002\027\003\000\002\030\005\000\002\031" +
    "\004\000\002\031\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\022\003\000\002" +
    "\022\004\000\002\022\003\000\002\022\004\000\002\102" +
    "\002\000\002\022\005\000\002\025\006\000\002\026\005" +
    "\000\002\026\004\000\002\026\004\000\002\026\006\000" +
    "\002\026\006\000\002\044\006\000\002\042\005\000\002" +
    "\042\003\000\002\042\003\000\002\043\005\000\002\043" +
    "\003\000\002\045\003\000\002\045\003\000\002\046\007" +
    "\000\002\103\002\000\002\046\006\000\002\047\003\000" +
    "\002\047\003\000\002\050\010\000\002\104\002\000\002" +
    "\050\006\000\002\051\005\000\002\051\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\066\003" +
    "\000\002\052\010\000\002\105\002\000\002\052\006\000" +
    "\002\053\003\000\002\053\003\000\002\067\003\000\002" +
    "\055\004\000\002\070\003\000\002\061\010\000\002\106" +
    "\002\000\002\061\006\000\002\062\014\000\002\107\002" +
    "\000\002\062\006\000\002\033\004\000\002\033\004\000" +
    "\002\033\006\000\002\034\004\000\002\034\003\000\002" +
    "\054\004\000\002\054\006\000\002\054\006\000\002\060" +
    "\004\000\002\060\004\000\002\060\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\064\003\000\002\064\003\000\002\056\003\000\002\056" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\074\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\u0111\001\002\000\006\003\007\046\010" +
    "\001\002\000\004\002\ufffd\001\002\000\016\003\012\054" +
    "\uff6c\056\011\057\uff6c\060\uff6c\061\uff6c\001\002\000\006" +
    "\003\u0106\046\u0107\001\002\000\004\054\ufffb\001\002\000" +
    "\012\054\uff6c\057\324\060\uff6c\061\uff6c\001\002\000\010" +
    "\054\uff6c\060\273\061\267\001\002\000\012\054\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\001\002\000\004\054\017\001\002" +
    "\000\030\002\uff6c\003\040\005\027\006\031\046\042\055" +
    "\uff6c\062\021\063\030\064\026\067\023\072\045\001\002" +
    "\000\032\002\uffd4\003\uffd4\005\uffd4\006\uffd4\046\uffd4\055" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4\067\uffd4\072\uffd4" +
    "\001\002\000\006\003\255\017\256\001\002\000\032\002" +
    "\uffd1\003\254\005\027\006\031\046\042\055\uffd1\062\021" +
    "\063\030\064\026\066\uffd1\067\023\072\045\001\002\000" +
    "\024\003\242\017\175\043\062\046\064\047\063\050\056" +
    "\051\055\075\054\076\057\001\002\000\032\002\uffb1\003" +
    "\uffb1\005\uffb1\006\uffb1\046\uffb1\055\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\066\uffb1\067\uffb1\072\uffb1\001\002\000\004\037" +
    "\240\001\002\000\024\003\177\017\175\043\062\046\064" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\006\037\uff8b\046\uff8b\001\002\000\006\003\160\017\161" +
    "\001\002\000\006\037\uff8a\046\uff8a\001\002\000\032\002" +
    "\uffd3\003\uffd3\005\uffd3\006\uffd3\046\uffd3\055\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\066\uffd3\067\uffd3\072\uffd3\001\002\000" +
    "\032\002\uffcd\003\uffcd\005\uffcd\006\uffcd\046\uffcd\055\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\066\uffcd\067\uffcd\072\uffcd\001" +
    "\002\000\006\002\ufffe\055\157\001\002\000\032\002\uffaf" +
    "\003\uffaf\005\uffaf\006\uffaf\046\uffaf\055\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\066\uffaf\067\uffaf\072\uffaf\001\002\000\032" +
    "\002\uffbd\003\uffbd\005\uffbd\006\uffbd\046\uffbd\055\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\066\uffbd\067\uffbd\072\uffbd\001\002" +
    "\000\004\046\156\001\002\000\034\002\uffd2\003\uffd2\005" +
    "\uffd2\006\uffd2\037\uffcb\046\uffd2\055\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\066\uffd2\067\uffd2\072\uffd2\001\002\000\032\002" +
    "\uffb0\003\uffb0\005\uffb0\006\uffb0\046\uffb0\055\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\066\uffb0\067\uffb0\072\uffb0\001\002\000" +
    "\022\005\027\006\031\017\105\023\103\026\107\027\101" +
    "\030\110\031\106\001\002\000\004\037\100\001\002\000" +
    "\032\002\uffcf\003\uffcf\005\uffcf\006\uffcf\046\uffcf\055\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\066\uffcf\067\uffcf\072\uffcf\001" +
    "\002\000\006\003\050\046\051\001\002\000\010\002\uffd0" +
    "\055\uffd0\066\uffd0\001\002\000\032\002\uffbc\003\uffbc\005" +
    "\uffbc\006\uffbc\046\uffbc\055\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\066\uffbc\067\uffbc\072\uffbc\001\002\000\004\055\uffa1\001" +
    "\002\000\004\023\052\001\002\000\020\043\062\046\064" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\052\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e" +
    "\015\uff7e\016\uff7e\020\uff7e\024\uff7e\025\uff7e\036\uff7e\037" +
    "\uff7e\041\uff7e\042\uff7e\044\uff7e\045\uff7e\065\uff7e\073\uff7e" +
    "\074\uff7e\001\002\000\052\007\uff78\010\uff78\011\uff78\012" +
    "\uff78\013\uff78\014\uff78\015\uff78\016\uff78\020\uff78\024\uff78" +
    "\025\uff78\036\uff78\037\uff78\041\uff78\042\uff78\044\uff78\045" +
    "\uff78\065\uff78\073\uff78\074\uff78\001\002\000\052\007\uff7b" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016" +
    "\uff7b\020\uff7b\024\uff7b\025\uff7b\036\uff7b\037\uff7b\041\uff7b" +
    "\042\uff7b\044\uff7b\045\uff7b\065\uff7b\073\uff7b\074\uff7b\001" +
    "\002\000\052\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79" +
    "\014\uff79\015\uff79\016\uff79\020\uff79\024\uff79\025\uff79\036" +
    "\uff79\037\uff79\041\uff79\042\uff79\044\uff79\045\uff79\065\uff79" +
    "\073\uff79\074\uff79\001\002\000\052\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\020\uff77" +
    "\024\uff77\025\uff77\036\uff77\037\uff77\041\uff77\042\uff77\044" +
    "\uff77\045\uff77\065\uff77\073\uff77\074\uff77\001\002\000\004" +
    "\073\070\001\002\000\036\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\020\uff7d\036\uff7d\037\uff7d\041\uff7d\042\uff7d\044\uff7d" +
    "\045\uff7d\065\uff7d\073\uff7d\074\uff7d\001\002\000\010\046" +
    "\066\075\065\076\067\001\002\000\052\007\uff7a\010\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\020" +
    "\uff7a\024\uff7a\025\uff7a\036\uff7a\037\uff7a\041\uff7a\042\uff7a" +
    "\044\uff7a\045\uff7a\065\uff7a\073\uff7a\074\uff7a\001\002\000" +
    "\036\007\uff7c\010\uff7c\011\uff7c\012\uff7c\020\uff7c\024\uff7c" +
    "\025\uff7c\036\uff7c\037\uff7c\041\uff7c\042\uff7c\065\uff7c\073" +
    "\uff7c\074\uff7c\001\002\000\052\007\uff75\010\uff75\011\uff75" +
    "\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\020\uff75\024" +
    "\uff75\025\uff75\036\uff75\037\uff75\041\uff75\042\uff75\044\uff75" +
    "\045\uff75\065\uff75\073\uff75\074\uff75\001\002\000\052\007" +
    "\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76" +
    "\016\uff76\020\uff76\024\uff76\025\uff76\036\uff76\037\uff76\041" +
    "\uff76\042\uff76\044\uff76\045\uff76\065\uff76\073\uff76\074\uff76" +
    "\001\002\000\052\007\uff74\010\uff74\011\uff74\012\uff74\013" +
    "\uff74\014\uff74\015\uff74\016\uff74\020\uff74\024\uff74\025\uff74" +
    "\036\uff74\037\uff74\041\uff74\042\uff74\044\uff74\045\uff74\065" +
    "\uff74\073\uff74\074\uff74\001\002\000\020\043\062\046\064" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\004\074\072\001\002\000\004\054\073\001\002\000\026" +
    "\003\040\005\027\006\031\046\042\055\uff6c\062\021\063" +
    "\030\064\026\067\023\072\045\001\002\000\004\055\075" +
    "\001\002\000\032\002\uffa2\003\uffa2\005\uffa2\006\uffa2\046" +
    "\uffa2\055\uffa2\062\uffa2\063\uffa2\064\uffa2\066\uffa2\067\uffa2" +
    "\072\uffa2\001\002\000\004\055\077\001\002\000\032\002" +
    "\uffa0\003\uffa0\005\uffa0\006\uffa0\046\uffa0\055\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\066\uffa0\067\uffa0\072\uffa0\001\002\000" +
    "\032\002\uffce\003\uffce\005\uffce\006\uffce\046\uffce\055\uffce" +
    "\062\uffce\063\uffce\064\uffce\066\uffce\067\uffce\072\uffce\001" +
    "\002\000\022\017\uff88\043\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\075\uff88\076\uff88\001\002\000\004\037\uffc7\001" +
    "\002\000\026\005\027\006\031\017\114\043\062\046\150" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\022\017\114\043\062\046\117\047\063\050\056\051\055" +
    "\075\054\076\057\001\002\000\024\017\114\020\uff6c\043" +
    "\062\046\117\047\063\050\056\051\055\075\054\076\057" +
    "\001\002\000\022\017\uff86\043\uff86\046\uff86\047\uff86\050" +
    "\uff86\051\uff86\075\uff86\076\uff86\001\002\000\022\017\uff89" +
    "\043\uff89\046\uff89\047\uff89\050\uff89\051\uff89\075\uff89\076" +
    "\uff89\001\002\000\022\017\uff87\043\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\075\uff87\076\uff87\001\002\000\004\020" +
    "\144\001\002\000\024\013\126\014\121\015\122\016\125" +
    "\020\uff6c\036\uff6c\037\uff6c\044\123\045\124\001\002\000" +
    "\006\020\uffc1\036\135\001\002\000\022\017\114\043\062" +
    "\046\117\047\063\050\056\051\055\075\054\076\057\001" +
    "\002\000\024\013\126\014\121\015\122\016\125\020\uff6c" +
    "\036\uff6c\037\uff6c\044\123\045\124\001\002\000\004\020" +
    "\uffc0\001\002\000\026\013\uff7c\014\uff7c\015\uff7c\016\uff7c" +
    "\017\105\020\uff7c\036\uff7c\037\uff7c\044\uff7c\045\uff7c\001" +
    "\002\000\010\020\uff9f\036\uff9f\037\uff9f\001\002\000\022" +
    "\017\uff90\043\uff90\046\uff90\047\uff90\050\uff90\051\uff90\075" +
    "\uff90\076\uff90\001\002\000\022\017\uff8f\043\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\051\uff8f\075\uff8f\076\uff8f\001\002\000" +
    "\022\017\uff8d\043\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d" +
    "\075\uff8d\076\uff8d\001\002\000\022\017\uff8c\043\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\075\uff8c\076\uff8c\001\002" +
    "\000\022\017\uff8e\043\uff8e\046\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\075\uff8e\076\uff8e\001\002\000\022\017\uff91\043\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\075\uff91\076\uff91\001" +
    "\002\000\010\020\uff9b\036\uff9b\037\uff9b\001\002\000\022" +
    "\017\114\043\062\046\117\047\063\050\056\051\055\075" +
    "\054\076\057\001\002\000\010\020\uff9c\036\uff9c\037\uff9c" +
    "\001\002\000\004\020\133\001\002\000\024\013\126\014" +
    "\121\015\122\016\125\020\uff6c\036\uff6c\037\uff6c\044\123" +
    "\045\124\001\002\000\010\020\uff9d\036\uff9d\037\uff9d\001" +
    "\002\000\022\017\114\043\062\046\117\047\063\050\056" +
    "\051\055\075\054\076\057\001\002\000\004\036\141\001" +
    "\002\000\004\020\uffc2\001\002\000\022\013\126\014\121" +
    "\015\122\016\125\020\uffbe\036\uff6c\044\123\045\124\001" +
    "\002\000\022\017\114\043\062\046\117\047\063\050\056" +
    "\051\055\075\054\076\057\001\002\000\004\020\uffbf\001" +
    "\002\000\010\020\uff9e\036\uff9e\037\uff9e\001\002\000\024" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\036\uffc3\037" +
    "\uffc3\044\uffc3\045\uffc3\001\002\000\004\037\uffc8\001\002" +
    "\000\004\046\153\001\002\000\004\037\152\001\002\000" +
    "\026\005\027\006\031\013\uff7c\014\uff7c\015\uff7c\016\uff7c" +
    "\017\105\037\uff7c\044\uff7c\045\uff7c\001\002\000\004\037" +
    "\uffc5\001\002\000\032\002\uffc9\003\uffc9\005\uffc9\006\uffc9" +
    "\046\uffc9\055\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9\067" +
    "\uffc9\072\uffc9\001\002\000\004\037\uffc4\001\002\000\004" +
    "\037\155\001\002\000\032\002\uffca\003\uffca\005\uffca\006" +
    "\uffca\046\uffca\055\uffca\062\uffca\063\uffca\064\uffca\066\uffca" +
    "\067\uffca\072\uffca\001\002\000\004\037\uffc6\001\002\000" +
    "\004\002\uffff\001\002\000\004\037\uffb5\001\002\000\012" +
    "\046\064\047\063\050\056\051\055\001\002\000\006\020" +
    "\uff6c\036\164\001\002\000\004\020\170\001\002\000\012" +
    "\046\064\047\063\050\056\051\055\001\002\000\004\020" +
    "\uffb2\001\002\000\006\020\uff6c\036\164\001\002\000\004" +
    "\020\uffb3\001\002\000\004\037\171\001\002\000\032\002" +
    "\uffb6\003\uffb6\005\uffb6\006\uffb6\046\uffb6\055\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\066\uffb6\067\uffb6\072\uffb6\001\002\000" +
    "\004\037\173\001\002\000\032\002\uffb4\003\uffb4\005\uffb4" +
    "\006\uffb4\046\uffb4\055\uffb4\062\uffb4\063\uffb4\064\uffb4\066" +
    "\uffb4\067\uffb4\072\uffb4\001\002\000\004\065\227\001\002" +
    "\000\022\017\175\043\062\046\064\047\063\050\056\051" +
    "\055\075\054\076\057\001\002\000\016\007\217\010\213" +
    "\011\216\012\215\024\214\025\212\001\002\000\004\055" +
    "\uffac\001\002\000\030\007\uff7d\010\uff7d\011\uff7d\012\uff7d" +
    "\020\uff6c\024\uff7d\025\uff7d\041\203\042\202\065\uff6c\074" +
    "\uff6c\001\002\000\010\020\uff9a\065\uff9a\074\uff9a\001\002" +
    "\000\022\017\175\043\062\046\064\047\063\050\056\051" +
    "\055\075\054\076\057\001\002\000\022\017\175\043\062" +
    "\046\064\047\063\050\056\051\055\075\054\076\057\001" +
    "\002\000\010\020\uff95\065\uff95\074\uff95\001\002\000\010" +
    "\020\uff96\065\uff96\074\uff96\001\002\000\010\020\uff97\065" +
    "\uff97\074\uff97\001\002\000\004\055\210\001\002\000\032" +
    "\002\uffab\003\uffab\005\uffab\006\uffab\046\uffab\055\uffab\062" +
    "\uffab\063\uffab\064\uffab\066\uffab\067\uffab\072\uffab\001\002" +
    "\000\020\043\uff80\046\uff80\047\uff80\050\uff80\051\uff80\075" +
    "\uff80\076\uff80\001\002\000\020\043\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\075\uff81\076\uff81\001\002\000\020\043" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\075\uff85\076\uff85" +
    "\001\002\000\020\043\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\075\uff7f\076\uff7f\001\002\000\020\043\uff83\046\uff83" +
    "\047\uff83\050\uff83\051\uff83\075\uff83\076\uff83\001\002\000" +
    "\020\043\uff82\046\uff82\047\uff82\050\uff82\051\uff82\075\uff82" +
    "\076\uff82\001\002\000\020\043\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\075\uff84\076\uff84\001\002\000\020\043\062" +
    "\046\064\047\063\050\056\051\055\075\054\076\057\001" +
    "\002\000\014\020\uff6c\041\203\042\202\065\uff6c\074\uff6c" +
    "\001\002\000\010\020\uff99\065\uff99\074\uff99\001\002\000" +
    "\004\020\224\001\002\000\014\020\uff6c\041\203\042\202" +
    "\065\uff6c\074\uff6c\001\002\000\010\020\uff98\065\uff98\074" +
    "\uff98\001\002\000\030\003\040\005\027\006\031\046\042" +
    "\055\uff6c\062\021\063\030\064\026\066\uff6c\067\023\072" +
    "\045\001\002\000\030\003\uffae\005\uffae\006\uffae\046\uffae" +
    "\055\uffae\062\uffae\063\uffae\064\uffae\066\uffae\067\uffae\072" +
    "\uffae\001\002\000\006\055\uff6c\066\231\001\002\000\026" +
    "\003\uffa8\005\uffa8\006\uffa8\046\uffa8\055\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\067\uffa8\072\uffa8\001\002\000\004\055\uffaa" +
    "\001\002\000\026\003\040\005\027\006\031\046\042\055" +
    "\uff6c\062\021\063\030\064\026\067\023\072\045\001\002" +
    "\000\004\055\236\001\002\000\004\055\uffa9\001\002\000" +
    "\032\002\uffad\003\uffad\005\uffad\006\uffad\046\uffad\055\uffad" +
    "\062\uffad\063\uffad\064\uffad\066\uffad\067\uffad\072\uffad\001" +
    "\002\000\004\055\uffa7\001\002\000\032\002\uffcc\003\uffcc" +
    "\005\uffcc\006\uffcc\046\uffcc\055\uffcc\062\uffcc\063\uffcc\064" +
    "\uffcc\066\uffcc\067\uffcc\072\uffcc\001\002\000\004\074\245" +
    "\001\002\000\004\055\uffa4\001\002\000\004\055\244\001" +
    "\002\000\032\002\uffa3\003\uffa3\005\uffa3\006\uffa3\046\uffa3" +
    "\055\uffa3\062\uffa3\063\uffa3\064\uffa3\066\uffa3\067\uffa3\072" +
    "\uffa3\001\002\000\004\054\uffa6\001\002\000\004\054\247" +
    "\001\002\000\026\003\040\005\027\006\031\046\042\055" +
    "\uff6c\062\021\063\030\064\026\067\023\072\045\001\002" +
    "\000\004\055\251\001\002\000\032\002\uffa5\003\uffa5\005" +
    "\uffa5\006\uffa5\046\uffa5\055\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\066\uffa5\067\uffa5\072\uffa5\001\002\000\032\002\uffd6\003" +
    "\uffd6\005\uffd6\006\uffd6\046\uffd6\055\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\066\uffd6\067\uffd6\072\uffd6\001\002\000\032\002" +
    "\uffd5\003\uffd5\005\uffd5\006\uffd5\046\uffd5\055\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\066\uffd5\067\uffd5\072\uffd5\001\002\000" +
    "\004\037\uffcb\001\002\000\004\037\uffba\001\002\000\006" +
    "\020\uff6c\046\257\001\002\000\004\020\uffb8\001\002\000" +
    "\004\020\262\001\002\000\004\020\uffb7\001\002\000\004" +
    "\037\263\001\002\000\032\002\uffbb\003\uffbb\005\uffbb\006" +
    "\uffbb\046\uffbb\055\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb" +
    "\067\uffbb\072\uffbb\001\002\000\004\037\265\001\002\000" +
    "\032\002\uffb9\003\uffb9\005\uffb9\006\uffb9\046\uffb9\055\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\066\uffb9\067\uffb9\072\uffb9\001" +
    "\002\000\010\054\uff6c\060\273\061\267\001\002\000\006" +
    "\003\366\046\367\001\002\000\010\054\uff6c\060\273\061" +
    "\267\001\002\000\004\054\ufffc\001\002\000\004\054\uffe6" +
    "\001\002\000\006\003\274\046\275\001\002\000\004\055" +
    "\uffe5\001\002\000\004\017\276\001\002\000\022\020\uff6c" +
    "\077\277\100\300\101\305\102\311\103\306\104\303\105" +
    "\307\001\002\000\014\037\uff73\046\uff73\054\uff73\056\uff73" +
    "\057\uff73\001\002\000\014\037\uff71\046\uff71\054\uff71\056" +
    "\uff71\057\uff71\001\002\000\004\020\317\001\002\000\004" +
    "\046\312\001\002\000\014\037\uff6d\046\uff6d\054\uff6d\056" +
    "\uff6d\057\uff6d\001\002\000\004\020\uffdb\001\002\000\014" +
    "\037\uff72\046\uff72\054\uff72\056\uff72\057\uff72\001\002\000" +
    "\014\037\uff6f\046\uff6f\054\uff6f\056\uff6f\057\uff6f\001\002" +
    "\000\014\037\uff70\046\uff70\054\uff70\056\uff70\057\uff70\001" +
    "\002\000\004\020\uffda\001\002\000\014\037\uff6e\046\uff6e" +
    "\054\uff6e\056\uff6e\057\uff6e\001\002\000\006\020\uff6c\036" +
    "\313\001\002\000\020\077\277\100\300\101\305\102\311" +
    "\103\306\104\303\105\307\001\002\000\004\020\uffd9\001" +
    "\002\000\004\020\uffd7\001\002\000\004\020\uffd8\001\002" +
    "\000\004\040\320\001\002\000\020\077\277\100\300\101" +
    "\305\102\311\103\306\104\303\105\307\001\002\000\010" +
    "\054\uff6c\056\011\057\uff6c\001\002\000\004\054\350\001" +
    "\002\000\006\054\uff6c\057\324\001\002\000\006\003\330" +
    "\046\331\001\002\000\004\054\ufff9\001\002\000\010\054" +
    "\ufff0\060\ufff0\061\ufff0\001\002\000\010\054\ufff1\060\ufff1" +
    "\061\ufff1\001\002\000\004\037\uffef\001\002\000\006\036" +
    "\333\040\uff6c\001\002\000\004\040\337\001\002\000\004" +
    "\046\335\001\002\000\004\040\uffeb\001\002\000\006\036" +
    "\333\040\uff6c\001\002\000\004\040\uffec\001\002\000\020" +
    "\077\277\100\300\101\305\102\311\103\306\104\303\105" +
    "\307\001\002\000\004\037\341\001\002\000\012\046\331" +
    "\054\uff6c\060\uff6c\061\uff6c\001\002\000\010\054\uffea\060" +
    "\uffea\061\uffea\001\002\000\010\054\uffed\060\uffed\061\uffed" +
    "\001\002\000\010\054\uffe9\060\uffe9\061\uffe9\001\002\000" +
    "\004\037\346\001\002\000\012\046\331\054\uff6c\060\uff6c" +
    "\061\uff6c\001\002\000\010\054\uffee\060\uffee\061\uffee\001" +
    "\002\000\026\003\040\005\027\006\031\046\353\055\uffdc" +
    "\062\021\063\030\064\026\067\023\072\045\001\002\000" +
    "\004\055\361\001\002\000\024\003\254\005\027\006\031" +
    "\046\042\062\021\063\030\064\026\067\023\072\045\001" +
    "\002\000\022\005\027\006\031\017\105\023\354\026\107" +
    "\027\101\030\110\031\106\001\002\000\026\005\027\006" +
    "\031\017\114\043\062\046\150\047\063\050\056\051\055" +
    "\075\054\076\057\001\002\000\004\037\356\001\002\000" +
    "\026\003\uffc9\005\uffc9\006\uffc9\046\uffc9\055\uffdd\062\uffc9" +
    "\063\uffc9\064\uffc9\067\uffc9\072\uffc9\001\002\000\026\003" +
    "\uffcf\005\uffcf\006\uffcf\046\uffcf\055\360\062\uffcf\063\uffcf" +
    "\064\uffcf\067\uffcf\072\uffcf\001\002\000\010\054\uffe1\060" +
    "\uffe1\061\uffe1\001\002\000\010\054\uffe0\060\uffe0\061\uffe0" +
    "\001\002\000\004\055\363\001\002\000\010\054\uff6c\060" +
    "\273\061\267\001\002\000\004\054\uffe4\001\002\000\004" +
    "\054\uffe8\001\002\000\004\055\uffe3\001\002\000\004\017" +
    "\370\001\002\000\022\020\uff6c\077\277\100\300\101\305" +
    "\102\311\103\306\104\303\105\307\001\002\000\004\020" +
    "\372\001\002\000\010\054\uff6c\056\011\057\uff6c\001\002" +
    "\000\004\054\374\001\002\000\026\003\040\005\027\006" +
    "\031\046\042\055\376\062\021\063\030\064\026\067\023" +
    "\072\045\001\002\000\026\003\254\005\027\006\031\046" +
    "\042\055\377\062\021\063\030\064\026\067\023\072\045" +
    "\001\002\000\010\054\uffde\060\uffde\061\uffde\001\002\000" +
    "\010\054\uffdf\060\uffdf\061\uffdf\001\002\000\004\055\u0101" +
    "\001\002\000\010\054\uff6c\060\273\061\267\001\002\000" +
    "\004\054\uffe2\001\002\000\004\054\uffe7\001\002\000\010" +
    "\054\ufffa\060\ufffa\061\ufffa\001\002\000\012\054\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\001\002\000\004\037\ufff6\001\002" +
    "\000\004\024\u0108\001\002\000\020\043\062\046\064\047" +
    "\063\050\056\051\055\075\054\076\057\001\002\000\004" +
    "\037\u010a\001\002\000\014\046\u0107\054\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\001\002\000\012\054\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\001\002\000\012\054\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\001\002\000\012\054\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\001\002\000\004\037\u010f\001\002\000\014\046\u0107\054" +
    "\uff6c\057\uff6c\060\uff6c\061\uff6c\001\002\000\012\054\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\015\014\012\020\013\074\014\001\001\000" +
    "\004\015\u0104\001\001\000\002\001\001\000\006\007\u0103" +
    "\074\325\001\001\000\012\021\270\023\267\024\265\074" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\021\006\033\022\017\025\043\026\042\037\036\041" +
    "\031\044\024\045\032\046\035\050\046\052\023\061\040" +
    "\062\034\074\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\022\251\025\043\026\042\037\036\041\252" +
    "\044\024\045\032\046\035\050\046\052\023\061\040\062" +
    "\034\001\001\000\012\054\240\056\175\057\052\065\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\054" +
    "\173\056\175\057\052\065\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\153\001\001\000" +
    "\002\001\001\000\006\037\101\040\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\075\001\001\000\002" +
    "\001\001\000\010\056\057\057\052\065\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\056\070\057\052\065\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\021\006\073\022\017\025" +
    "\043\026\042\037\036\041\031\044\024\045\032\046\035" +
    "\050\046\052\023\061\040\062\034\074\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\033\146\037\145\044\111\056\114\057\052" +
    "\065\060\001\001\000\014\033\144\044\111\056\114\057" +
    "\052\065\060\001\001\000\020\033\112\042\110\044\111" +
    "\056\114\057\052\065\060\074\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\142\036\127\074\126\001\001\000\002\001" +
    "\001\000\014\033\131\044\111\056\114\057\052\065\060" +
    "\001\001\000\010\034\117\036\127\074\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\033\130\044\111\056\114\057\052\065\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\133" +
    "\036\127\074\126\001\001\000\002\001\001\000\016\033" +
    "\135\043\136\044\111\056\137\057\052\065\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\117\036" +
    "\127\074\126\001\001\000\016\033\135\043\141\044\111" +
    "\056\137\057\052\065\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\171\001\001\000\004\057\161\001\001" +
    "\000\006\051\162\074\164\001\001\000\002\001\001\000" +
    "\004\057\165\001\001\000\002\001\001\000\006\051\166" +
    "\074\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\225\001\001\000\012\054\222\056\175\057\052\065" +
    "\177\001\001\000\006\063\210\064\217\001\001\000\004" +
    "\105\206\001\001\000\006\060\200\074\203\001\001\000" +
    "\002\001\001\000\012\054\205\056\175\057\052\065\177" +
    "\001\001\000\012\054\204\056\175\057\052\065\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\056" +
    "\220\057\052\065\060\001\001\000\006\060\221\074\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\060" +
    "\224\074\203\001\001\000\002\001\001\000\040\005\021" +
    "\006\227\022\017\025\043\026\042\037\036\041\031\044" +
    "\024\045\032\046\035\050\046\052\023\061\040\062\034" +
    "\074\045\001\001\000\002\001\001\000\012\053\233\055" +
    "\231\067\232\074\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\021\006\236\022\017\025\043\026" +
    "\042\037\036\041\031\044\024\045\032\046\035\050\046" +
    "\052\023\061\040\062\034\074\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\245\001\001\000\004\106" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\021\006\247\022" +
    "\017\025\043\026\042\037\036\041\031\044\024\045\032" +
    "\046\035\050\046\052\023\061\040\062\034\074\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\153\001\001\000\004\103" +
    "\263\001\001\000\006\047\257\074\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\u0102\023\267\024\265\074\271\001\001\000" +
    "\002\001\001\000\012\021\364\023\267\024\265\074\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\361\001\001\000\002\001\001\000\012" +
    "\017\301\027\300\030\303\074\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\313\074\314\001\001\000\006\017" +
    "\301\030\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\320\001" +
    "\001\000\010\014\322\074\014\075\321\001\001\000\002" +
    "\001\001\000\006\007\324\074\325\001\001\000\004\010" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\344\001\001\000\006\011\331\074" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\335\074\333\001\001\000\002\001" +
    "\001\000\004\017\337\001\001\000\002\001\001\000\010" +
    "\010\341\012\342\074\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\341\012\346\074\343\001\001\000\002\001\001\000" +
    "\036\005\351\022\017\025\043\026\042\032\350\037\036" +
    "\041\031\044\024\045\032\046\035\050\046\052\023\061" +
    "\040\062\034\001\001\000\002\001\001\000\032\022\251" +
    "\025\356\026\042\037\036\041\252\044\024\045\032\046" +
    "\035\050\046\052\023\061\040\062\034\001\001\000\006" +
    "\037\101\040\103\001\001\000\016\033\354\037\145\044" +
    "\111\056\114\057\052\065\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\363\023\267" +
    "\024\265\074\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\377\001\001\000\002\001\001\000\012" +
    "\017\301\027\370\030\303\074\307\001\001\000\002\001" +
    "\001\000\010\014\322\074\014\075\372\001\001\000\002" +
    "\001\001\000\034\005\374\022\017\025\043\026\042\037" +
    "\036\041\031\044\024\045\032\046\035\050\046\052\023" +
    "\061\040\062\034\001\001\000\032\022\251\025\043\026" +
    "\042\037\036\041\252\044\024\045\032\046\035\050\046" +
    "\052\023\061\040\062\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\u0101\023\267" +
    "\024\265\074\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u010d" +
    "\001\001\000\002\001\001\000\010\056\u0108\057\052\065" +
    "\060\001\001\000\002\001\001\000\010\015\u010a\016\u010b" +
    "\074\u010c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\u010a\016\u010f" +
    "\074\u010c\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    protected int error_sync_size(){
        return 1;
    }

    private Symbol tokenError;
    public boolean huboErrores = false;

    private TablaSimbolos tablaSimbolos = new TablaSimbolos();

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            tokenError = s;

            //System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            ErrorUI(mensaje, lexema, fila, columna);

            //System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String message, Object info)
    {
        if (info instanceof String){
            System.out.println(message);
        }
        else {
            if (info instanceof Symbol){
                String m = "Error sintático en: " + message;
                Symbol s = (Symbol)info;
                m += ", con el símbolo: \"" + s.value.toString() + "\"";
                ErrorUI(m, s.value.toString(), (s.left+1), s.right);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, int columna)
    {
        String msg = pMsg + ". En la línea: " + (linea) + ", columna: " + (columna) + ".";

        huboErrores = true;
        Main.miInstancia.agregarErrorSintactico(msg);
    }

    public void ErrorSemantico(Simbolo simbolo)
    {
        String msg = "Error en la línea "+ simbolo.getFila() + ", columna "+ simbolo.getColumna() +". Ya existe ";
        if(simbolo instanceof Variable){
            msg += "la variable '" + simbolo.getIdentificador() + "' en el ámbito " + simbolo.getAmbito();
        }
        else if(simbolo instanceof Funcion){
            msg += "la funcion o procedimiento '" + simbolo.getIdentificador() + "' con los mismos parámetros";
        }

        huboErrores = true;
        Main.miInstancia.agregarErrorSemantico(msg);
    }

    public void ErrorSemantico(String tipo, String identificador, int fila, int columna){
        String msg = "Error en la línea "+ (fila+1) + ", columna "+ columna + ". ";
        switch (tipo){
            case "parametro":
                msg += "El parámetro '" + identificador + "' ya está definido en la función";
                break;
            case "variable":
                msg += "La variable '" + identificador + "' no ha sido declarada";
                break;
            case "funcion":
                msg += "La función o procedimiento '" + identificador + "' no existe con esos parámetros";
                break;
            case "retorno":
                msg += "El identificador '" + identificador + "' en el retorno no corresponde al nombre de la función";
                break;
        }

        huboErrores = true;
        Main.miInstancia.agregarErrorSemantico(msg);
    }

    public void mostrarTablaSimbolos(){
        Main.miInstancia.mostrarTablaSimbolos(tablaSimbolos.verTablaSimbolos());
    }

    //el retorno solo es util para las funciones
    public void verificarVariablesUsadas(Object ambito, boolean esFuncion){
        int tamanoVariablesUsadas = tablaSimbolos.variablesUsadas.size();

        if(ambito instanceof String){ //se refiere a una variable
            for(int i=0; i<tamanoVariablesUsadas; i++){
                Variable var = tablaSimbolos.variablesUsadas.get(i);

                if(!tablaSimbolos.existeVariable(var.getIdentificador(), ambito.toString())){
                    ErrorSemantico("variable", var.getIdentificador(), var.getFila(), var.getColumna());
                }
            }
        }
        else if(ambito instanceof Funcion){
            Funcion fun = (Funcion) ambito;
            for(int i=0; i<tamanoVariablesUsadas; i++){
                Variable var = tablaSimbolos.variablesUsadas.get(i);

                if(esFuncion && (i == tamanoVariablesUsadas-1)){
                    break; //este caso ya se evaluó en el retorno de función
                }else{
                    boolean existeParametro = false;
                    for(Variable v : fun.getParametros()){
                        if(var.getIdentificador().equals(v.getIdentificador())){
                            existeParametro = true;
                            break;
                        }
                    }
                    if(!existeParametro &&
                        !tablaSimbolos.existeVariable(var.getIdentificador(), fun.getIdentificador())){
                        ErrorSemantico("variable", var.getIdentificador(), var.getFila(), var.getColumna());
                    }
                }
            }
        }
    }

    public boolean verificarRetornoFuncion(Funcion funcion){
        if(funcion.getTipoRetorno() == null)  return true;    //es procedimiento

        Variable var = tablaSimbolos.variablesUsadas.get( tablaSimbolos.variablesUsadas.size()-1 );

        if(!var.getIdentificador().equals(funcion.getIdentificador())){
            ErrorSemantico("retorno", var.getIdentificador(), var.getFila(), var.getColumna());
            return false;
        }
        return true;
    }

    public boolean existeParametro(Funcion funcion, String identificador){
        for(Variable v : funcion.getParametros()){
            if(v.getIdentificador().equals(identificador)){
                return true;
            }
        }
        return false;
    }


    public void agregarFuncion(String identificador, int fila, int columna){
        //null si todos los parámetros están bien
        ArrayList<Variable> errores = tablaSimbolos.getParametrosErroneos();
        if(errores != null){
            for(Variable v : errores)
                ErrorSemantico("parametro", v.getIdentificador(), v.getFila(), v.getColumna());
            //para que no quede un tipo ahí botado
            tablaSimbolos.desecharUltimoTipoDato();
        }
        else{
            Funcion funcion = tablaSimbolos.crearFuncion(identificador, fila, columna);
            if(verificarRetornoFuncion(funcion)){
                tablaSimbolos.ordenarVariables();
                //Revisa las variables locales
                for(int i=0; i<tablaSimbolos.variables.size(); i++){
                    Variable var = tablaSimbolos.variables.get(i);
                    var.setAmbito(identificador);
                    if(!existeParametro(funcion, var.getIdentificador()) &&
                        !tablaSimbolos.existeSimbolo(var)){
                        tablaSimbolos.insertar(var);
                    }else{
                        ErrorSemantico(var);
                    }
                }

                //revisa las llamadas a variables
                if(funcion.getTipoRetorno() != null){  //es funcion
                    verificarVariablesUsadas(funcion, true);
                }else{                          //es procedimiento
                    verificarVariablesUsadas(funcion, false);
                }

                if(!tablaSimbolos.existeSimbolo(funcion)){
                    tablaSimbolos.insertar(funcion);
                }else{
                    ErrorSemantico(funcion);
                }
            }
        }

        //limpia la lista para ser usada luego
        tablaSimbolos.variables = new ArrayList<>();
        //Se limpia la lista para ser usada luego
        tablaSimbolos.variablesUsadas = new ArrayList<>();
        //limpia la lista de parámetros para que pueda ser usada luego
        tablaSimbolos.parametros = new ArrayList<>();
        //este simpre se traslapa entre producciones >:v
        tablaSimbolos.limpiarParametrosLlamada();
    }


    public void agregarCodigoEnsamblador(String pCodigo)
    {
        Main.miInstancia.agregarCodigoEnsamblador(pCodigo);
    }

    public void VerificarBanderaHuboErrores()
    {
        if (huboErrores)
        {
            Main.miInstancia.EliminarArchivoASM();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {


    public PilaSemantica pilaSemantica = new PilaSemantica();
    public PilaSemantica pilaSemantica_2 = new PilaSemantica();

    public boolean datosGlobales = true;


  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo END 
            {
              Symbol RESULT =null;
		
                verificarVariablesUsadas("Global", false);

                //que este quede de último xD no sé donde más meterlo
                mostrarTablaSimbolos();
                VerificarBanderaHuboErrores();
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo 
            {
              Symbol RESULT =null;
		
                    Symbol tokenAct = (Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1);
                    report_error("PROGRAM sin cierre END", tokenAct);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= PROGRAM error 
            {
              Symbol RESULT =null;
		
                    report_error("PROGRAM", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= declarar_datos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= error 
            {
              Symbol RESULT =null;
		
                    report_error("Declaraciones globales", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar_datos ::= constantes variables 
            {
              Symbol RESULT =null;
		
                    tablaSimbolos.ordenarVariables();
                    for(int i=0; i<tablaSimbolos.variables.size(); i++){
                        Variable var = tablaSimbolos.variables.get(i);
                        var.setAmbito("Global");
                        if(!tablaSimbolos.existeSimbolo(var)){
                            tablaSimbolos.insertar(var);
                        }else{
                            ErrorSemantico(var);
                        }
                    }
                    //limpia la lista de variables para ser usada luego
                    tablaSimbolos.variables = new ArrayList<>();

                    datosGlobales = false; // evitar los push de las variables y constantes en funciones y procs
                    pilaSemantica.clear(); // evitar basura en la pila
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarar_datos_locales ::= constantes variables 
            {
              Symbol RESULT =null;
		 pilaSemantica.clear(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos_locales",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constantes ::= CONST _constantes 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                    if (datosGlobales)
                    {
                        pilaSemantica.push_init(c.toString());

                        // Mandar a traducir
                        //pilaSemantica.print();

                        pilaSemantica.clear();
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Symbol RESULT =null;

                    report_error("Declaración de constante", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= CONST error NT$0 OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // _constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int oa_2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int oa_2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object oa_2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Symbol tok = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int opcleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object opc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                    if (datosGlobales)
                    {
                        pilaSemantica.pop_end(); // quitar el push de tokens

                        pilaSemantica.push_init(id.toString());
                        pilaSemantica.push_init(oa_2.toString());
                        pilaSemantica.push_init(tok.value.toString());
                        pilaSemantica.push_init(opc.toString());
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // __constantes ::= _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // __constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= VAR _variables 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                if (datosGlobales)
                {
                    //pilaSemantica.push_init(v.toString());
                    // Mandar a traducir -> LO HAGO EN '_variables'
                    pilaSemantica.clear();
                }
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Symbol RESULT =null;

                    report_error("Declaración de variable", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= VAR error NT$1 OPERADOR_PUNTO_Y_COMA ___variables 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _variables ::= IDENTIFICADOR __variables OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA ___variables 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int _varleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int _varright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Symbol _var = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int odpleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int odpright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object odp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Symbol tipo = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int oypcleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int oypcright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object oypc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                    tablaSimbolos.agregarVariable(id.toString(), idleft, idright);

                    if (datosGlobales)
                    {
                        // Forma en la pila: <tipo> <id_1> <id_ 2> ... <id_3> <;>

                        pilaSemantica.push_end(tipo.value.toString());
                        pilaSemantica.push_end(odp.toString());
                        pilaSemantica.push_end(id.toString());

                        if (_var != null) // verifico si se declaró más de una variable en la linea
                        {
                            String[] lista = (String[]) _var.value;

                            for (int i = 0; i < lista.length; i++)
                            {
                                pilaSemantica.push_end(lista[i]);
                            }
                        }
                        pilaSemantica.push_end(oypc.toString());

                        agregarCodigoEnsamblador(Generador.DeclaracionesVariables(pilaSemantica));
                        pilaSemantica.clear();
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // __variables ::= OPERADOR_COMA IDENTIFICADOR __variables 
            {
              Symbol RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ciclo_locoleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int ciclo_locoright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Symbol ciclo_loco = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                    tablaSimbolos.agregarVariableSinTipo(id.toString(), idleft, idright);

                    if (datosGlobales)
                    {
                        if (ciclo_loco != null) // obtener los identificadores respectivos de la linea cuando se declaran varios
                        {
                            // Array porque List<> no se puede castear de objeto a lista
                            String[] listaTemp2 = (String[]) ciclo_loco.value;
                            // ---add----
                            listaTemp2  = Arrays.copyOf(listaTemp2, listaTemp2.length + 1);
                            listaTemp2[listaTemp2.length - 1] = id.toString();
                            // -----------

                            RESULT = new Symbol(-1, listaTemp2);
                        }
                        else
                        {   //Primera vez que inserta
                            String[] listaTemp = {id.toString()};
                            RESULT = new Symbol(-1, listaTemp);
                        }
                    }
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // __variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ___variables ::= _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ___variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_func_proc ::= declarar_funciones declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarar_func_proc ::= declarar_procedimientos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarar_func_proc ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Symbol RESULT =null;

                             report_error("Declaración de función", tokenError);
                             RESULT = new Symbol(-1);
                         
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$2",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarar_func_proc ::= FU error NT$2 END declarar_func_proc 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Symbol RESULT =null;

                              report_error("Declaración de procedimiento", tokenError);
                              RESULT = new Symbol(-1);
                          
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$3",63, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarar_func_proc ::= PROCEDURE error NT$3 END declarar_func_proc 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarar_funciones ::= FU IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos_locales BEGIN cuerpo asignar_valores_1 END 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)).value;
		
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarar_funciones ::= FU IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos_locales BEGIN retorno_funcion END 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)).value;
		
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos_locales BEGIN cuerpo END 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)).value;
		
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos_locales BEGIN END 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		
                        //Esta es local, está definida dentro de Syntax.cup
                        // Es para poder ser reusada y mostrar los errores
                        agregarFuncion(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // retorno_funcion ::= 
            {
              Symbol RESULT =null;
		  //es aceptado pero se reporta como error
                        Symbol tokenAct = (Symbol)CUP$Syntax$stack.peek();
                        report_error("Retorno de función", tokenAct);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_entrada ::= _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _parametros_entrada ::= tipos IDENTIFICADOR __parametros_entrada 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                        tablaSimbolos.agregarParametro(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // __parametros_entrada ::= OPERADOR_COMA _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // __parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= cuerpo instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= cuerpo estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo ::= instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo ::= estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo ::= error 
            {
              Symbol RESULT =null;
		
                report_error("Cuerpo", tokenError);
                RESULT = new Symbol(-1);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // _cuerpo ::= cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // _cuerpo ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instrucciones ::= asignar_valores_1 
            {
              Symbol RESULT =null;
		 tablaSimbolos.limpiarParametrosLlamada(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucciones ::= asignar_valores_2 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
		 tablaSimbolos.limpiarParametrosLlamada(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrucciones ::= expr_read_write 
            {
              Symbol RESULT =null;
		 tablaSimbolos.limpiarParametrosLlamada(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrucciones ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
		 tablaSimbolos.limpiarParametrosLlamada(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Symbol RESULT =null;

                         report_error("Expresión", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$4",64, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instrucciones ::= error NT$4 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignar_valores_1 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int op_1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int op_1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op_1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol exp = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                        pilaSemantica.push_init(op_1.toString());
                        pilaSemantica.push_init(id.toString());

                        if(pilaSemantica.size() == 5) // 5 -> cantidad de operandos para la expresion binaria
                        {
                            agregarCodigoEnsamblador(Generador.ExpresionesAritmeticas(pilaSemantica));
                        }

                        pilaSemantica.clear();

                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_1",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignar_valores_2 ::= IDENTIFICADOR ___operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignar_valores_2 ::= IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int __oaleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int __oaright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Symbol __oa = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                        pilaSemantica.push_init(__oa.value.toString());
                        pilaSemantica.push_init(id.toString());

                        agregarCodigoEnsamblador(Generador.ExpresionesAritmeticas_(pilaSemantica));

                        pilaSemantica.clear();

                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignar_valores_2 ::= __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int __oaleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int __oaright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol __oa = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                        pilaSemantica.push_init(__oa.value.toString());
                        pilaSemantica.push_init(id.toString());

                        agregarCodigoEnsamblador(Generador.ExpresionesAritmeticas_(pilaSemantica));
                        pilaSemantica.clear();

                        tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int _oaleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int _oaright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Symbol _oa = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                        pilaSemantica.push_init(_oa.value.toString());
                        pilaSemantica.push_init(id2.toString());
                        pilaSemantica.push_init(id1.toString());

                        agregarCodigoEnsamblador(Generador.ExpresionesAritmeticas__(pilaSemantica));
                        pilaSemantica.clear();

                        tablaSimbolos.agregarVariableUsada(id1.toString(), id1left, id1right);
                        tablaSimbolos.agregarVariableUsada(id2.toString(), id2left, id2right);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int _oaleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int _oaright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol _oa = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                        pilaSemantica.push_init(_oa.value.toString());
                        pilaSemantica.push_init(id2.toString());
                        pilaSemantica.push_init(id1.toString());

                        agregarCodigoEnsamblador(Generador.ExpresionesAritmeticas__(pilaSemantica));
                        pilaSemantica.clear();

                        tablaSimbolos.agregarVariableUsada(id1.toString(), id1left, id1right);
                        tablaSimbolos.agregarVariableUsada(id2.toString(), id2left, id2right);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
                        boolean valida = tablaSimbolos.validarLlamadaFuncion(id.toString());
                        if(!valida){
                            ErrorSemantico("funcion", id.toString(), idleft, idright);
                        }
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_llamada_func ::= expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_llamada_func ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_read_write ::= expr_read 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_read_write ::= expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_read ::= READ OPERADOR_PARENTESIS_ABRIR _expr_read OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$5 ::= 
            {
              Symbol RESULT =null;

                        report_error("Función READ", tokenError);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$5",65, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_read ::= READ error NT$5 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _expr_read ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _expr_read ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$6 ::= 
            {
              Symbol RESULT =null;

                        report_error("Función WRITE", tokenError);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$6",66, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_write ::= WRITE error NT$6 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _expr_write ::= OPERADOR_COMA _tokens _expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _expr_write ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estruc_de_control ::= sentencia_if 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estruc_de_control ::= sentencia_while 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estruc_de_control ::= sentencia_for 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // pre_sentencia_if ::= THEN 
            {
              Symbol RESULT =null;
		
                    agregarCodigoEnsamblador(Generador.EstrucControl_IF(pilaSemantica_2));
                    pilaSemantica_2.clear();
                 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("pre_sentencia_if",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_if ::= IF expr_booleanas pre_sentencia_if _cuerpo _sentencia_if END 
            {
              Symbol RESULT =null;
		 agregarCodigoEnsamblador(Generador.EstrucControl_END()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$7 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia IF", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$7",67, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_if ::= IF error NT$7 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // pre_sentencia_else ::= ELSE 
            {
              Symbol RESULT =null;
		 agregarCodigoEnsamblador(Generador.EstrucControl_IF_ELSE()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("pre_sentencia_else",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_else ::= pre_sentencia_else _cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // pre_sentencia_while ::= DO 
            {
              Symbol RESULT =null;
		
                        agregarCodigoEnsamblador(Generador.EstrucControl_WHILE(pilaSemantica_2));
                        pilaSemantica_2.clear();
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("pre_sentencia_while",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia_while ::= WHILE expr_booleanas pre_sentencia_while BEGIN _cuerpo END 
            {
              Symbol RESULT =null;
		
                        agregarCodigoEnsamblador(Generador.UltimosLabelsWhile());
                        pilaSemantica_2.clear();
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$8 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia WHILE", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$8",68, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencia_while ::= WHILE error NT$8 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$9 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia FOR", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$9",69, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia_for ::= FOR error NT$9 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // _expr_aritmeticas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_booleanas ::= tokens operadores_booleanos_1 tokens _expr_booleanas 
            {
              Symbol RESULT =null;
		int tk_1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int tk_1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Symbol tk_1 = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int op_1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int op_1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Symbol op_1 = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int tk_2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int tk_2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol tk_2 = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
                pilaSemantica_2.push_end(tk_1.value.toString());
                pilaSemantica_2.push_end(op_1.value.toString());
                pilaSemantica_2.push_end(tk_2.value.toString());

                // Evitar conflictos con traducccion de variables
                pilaSemantica.clear();
                // ----------------------------------------------
              
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Symbol RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object oa = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 pilaSemantica.push_end(oa.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Symbol RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object os = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 pilaSemantica.push_end(os.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Symbol RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 pilaSemantica.push_end(om.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Symbol RESULT =null;
		int odleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int odright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object od = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 pilaSemantica.push_end(od.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // _operadores_aritmeticos ::= MOD 
            {
              Symbol RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 pilaSemantica.push_end(mod.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // _operadores_aritmeticos ::= DIV 
            {
              Symbol RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 pilaSemantica.push_end(div.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Symbol RESULT =null;
		int oileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int oiright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object oi = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, oi.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Symbol RESULT =null;
		int odleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int odright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object od = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, od.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;
		int omaqleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int omaqright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object omaq = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, omaq.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;
		int omaiqleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int omaiqright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object omaiq = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, omaiq.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;
		int omeqleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int omeqright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object omeq = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, omeq.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;
		int omeiqleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int omeiqright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object omeiq = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, omeiq.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;
		int oddleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int oddright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object odd = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, odd.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operadores_booleanos_1 ::= operadores_booleanos 
            {
              Symbol RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Symbol ob = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, ob.value); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operadores_booleanos_1 ::= OPERADOR_ASIGNACION_2 
            {
              Symbol RESULT =null;
		int oa_2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int oa_2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object oa_2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, oa_2.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tokens ::= _tokens 
            {
              Symbol RESULT =null;
		int _toleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int _toright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Symbol _to = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, _to.value); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tokens ::= tokens_boolean 
            {
              Symbol RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Symbol tb = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 RESULT = new Symbol(-1, tb.value); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // _tokens ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                pilaSemantica.push_end(id.toString());
                RESULT = new Symbol(-1, id.toString());

                tablaSimbolos.agregarParametroLlamada(id.toString());
                tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object lne = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                pilaSemantica.push_end(lne.toString());
                RESULT = new Symbol(-1, lne.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.INT);
          
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;
		int lnfleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int lnfright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object lnf = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                pilaSemantica.push_end(lnf.toString());
                RESULT = new Symbol(-1, lnf.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.REAL);
          
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // _tokens ::= LITERAL_STRING 
            {
              Symbol RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                pilaSemantica.push_end(ls.toString());
                RESULT = new Symbol(-1, ls.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.STRING);
          
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tokens_boolean ::= TRUE 
            {
              Symbol RESULT =null;
		int Trueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int Trueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object True = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                RESULT = new Symbol(-1, True.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
           
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tokens_boolean ::= FALSE 
            {
              Symbol RESULT =null;
		int Falseleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int Falseright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object False = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                RESULT = new Symbol(-1, False.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                RESULT = new Symbol(-1, id.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
                tablaSimbolos.agregarVariableUsada(id.toString(), idleft, idright);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tokens_boolean ::= NOT TRUE 
            {
              Symbol RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                RESULT = new Symbol(-1, nt.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tokens_boolean ::= NOT FALSE 
            {
              Symbol RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
                RESULT = new Symbol(-1, nf.toString());

                tablaSimbolos.agregarParametroLlamada(TipoDato.BOOLEAN);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipos ::= INT 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, i.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.INT);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipos ::= SHORTINT 
            {
              Symbol RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, si.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.SHORTINT);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipos ::= LONGINT 
            {
              Symbol RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, li.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.LONGINT);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipos ::= REAL 
            {
              Symbol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, r.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.REAL);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipos ::= STRING 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, s.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.STRING);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tipos ::= CHAR 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, c.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.CHAR);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipos ::= BOOLEAN 
            {
              Symbol RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
            RESULT = new Symbol(-1, b.toString());

            tablaSimbolos.agregarTipoDato(TipoDato.BOOLEAN);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
